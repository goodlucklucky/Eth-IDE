name: Release

on:
  release:
    types: [published]

  pull_request:
    branches:
      - release/**
      - master
    paths-ignore:
      - 'README.md'

  workflow_dispatch:

env:
  owner: ObsidianLabs
  own_components: eth-components
  share_components: electron-components
  project_build: eth
  project_project: eth
  project_name: Ethereum Studio
  project_main_build_script: yarn && yarn dist
  project_web_build_script: yarn && PUBLIC_URL=/ CDN=true yarn build:react
  os_matrix: '[\"macos-latest\", \"ubuntu-18.04\", \"windows-2019\"]'
  main_enable_auth: false
  web_enable_auth: true
  cos_bucket: ethereum-ide-1303090311
  cos_region: ap-singapore
  premium_editor: ../premium-editor
  dns_path: https://eth.ide.black/

jobs:
  # Extract version
  versions:
    runs-on: ubuntu-18.04

    steps:
      - name: Get ${{ env.project_name }} version
        id: version
        shell: bash
        run: |
          echo ::set-output name=BRANCH::${GITHUB_REF##*[\/v]}
          echo ::set-output name=VERSION::${GITHUB_REF##*/}
          echo running on branch ${GITHUB_REF##*[\/v]}
          echo running on version ${GITHUB_REF##*/}

    outputs:
      branch: ${{ steps.version.outputs.BRANCH }}
      version: ${{ steps.version.outputs.VERSION }}
      v_version: v${{ steps.version.outputs.VERSION }}
      component_version: v${{ steps.version.outputs.VERSION }}-${{ env.project_build }}
      new_release: ${{ steps.version.outputs.BRANCH != 'master' && steps.version.outputs.BRANCH != 'develop' }}
      rc_release: ${{ contains(steps.version.outputs.VERSION, 'rc') }}

  # Update package.json version to match release version
  bump:
    needs: versions
    runs-on: ubuntu-18.04

    steps:
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: master
          fetch-depth: 0
          token: ${{ secrets.obsidians_token }}

      - name: Bump version
        if: ${{ needs.versions.outputs.branch == 'master' }}
        run: |
          yarn config set version-git-tag false
          yarn version --new-version ${{ needs.versions.outputs.version }}
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git diff-index --quiet HEAD || git commit -am '${{ needs.versions.outputs.v_version }}'

  set-build-env:
    needs: versions
    runs-on: ubuntu-18.04
    steps:
      - name: Override
        if: ${{ needs.versions.output.rc_release == 'true'}}
        run: |
          echo ::set-output name=APP_ENV::release

      - name: Set test env
        if: ${{ needs.versions.outputs.branch == 'develop' ||  needs.versions.outputs.branch == 'poc'}}
        run: |
          echo ::set-output name=APP_ENV::test
          echo "project_build_script= yarn && PUBLIC_URL=/ CDN=true  NODE_ENV=test yarn build:react" >> $GITHUB_ENV
          echo "dns_path=https://eth-test.ide.black/" >> $GITHUB_ENV
          echo "cos_bucket=ethereum-ide-test-1303090311" >> $GITHUB_ENV
          echo "Deploying ${{ github.ref }} branch"

      - name: Set rc env
        if: ${{ needs.versions.outputs.branch == 'release'}}
        run: |
          echo ::set-output name=APP_ENV::rc
          echo "project_build_script= yarn && PUBLIC_URL=/ CDN=true  NODE_ENV=test yarn build:react" >> $GITHUB_ENV
          echo "dns_path=https://eth-test.ide.black/" >> $GITHUB_ENV
          echo "cos_bucket=ethereum-ide-test-1303090311" >> $GITHUB_ENV
          echo "Deploying ${{ github.ref }} branch"

      - name: Set production env
        if: ${{  needs.versions.outputs.branch == 'master' }}
        run: echo ::set-output name=APP_ENV::production

  # Generate matrix for the following steps
  generate-matrix:
    needs: set-build-env
    runs-on: ubuntu-18.04
    steps:
      - name: Generate os matrix
        id: set-os-matrix
        run: echo ::set-output name=os::${{ env.os_matrix }}

      - name: Generate component matrix
        id: set-component-matrix
        run: echo ::set-output name=component::[\"${{ env.own_components }}\", \"${{ env.share_components }}\"]

    outputs:
      os: ${{ steps.set-os-matrix.outputs.os }}
      component: ${{ steps.set-component-matrix.outputs.component }}

  release:
    needs: [generate-matrix, set-build-env, bump]

    strategy:
      matrix:
        os: ${{ fromJson(needs.generate-matrix.outputs.os) }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Checkout ${{ env.share_components }}
        uses: actions/checkout@v2
        with:
          repository: ${{ env.owner }}/${{ env.share_components }}
          ref: ${{ needs.set-build-env.outputs.branch }}
          path: ./${{ env.share_components }}
          token: ${{ secrets.obsidians_token }}

      - name: Checkout ${{ env.own_components }}
        uses: actions/checkout@v2
        with:
          repository: ${{ env.owner }}/${{ env.own_components }}
          ref: ${{ needs.set-build-env.outputs.branch }}
          path: ./${{ env.own_components }}
          token: ${{ secrets.obsidians_token }}

      - name: Checkout Premium Editor
        uses: actions/checkout@v2
        with:
          repository: ${{ env.owner }}/premium-editor
          ref: ${{ needs.set-build-env.outputs.branch }}
          path: ./premium-editor
          token: ${{ secrets.obsidians_token }}

      - name: Checkout ${{ env.project_name }}
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.set-build-env.outputs.branch }}
          path: ./studio

      - name: Install ${{ env.share_components }} submodule
        working-directory: ./${{ env.share_components }}
        run: git submodule update --init

      - name: Install ${{ env.share_components }} dependencies
        working-directory: ./${{ env.share_components }}
        run: yarn

      - name: Build ${{ env.share_components }}
        working-directory: ./${{ env.share_components }}
        run: yarn build

      - name: Install ${{ env.own_components }} submodule
        working-directory: ./${{ env.own_components }}
        run: git submodule update --init

      - name: Install ${{ env.own_components }} dependencies
        working-directory: ./${{ env.own_components }}
        run: yarn

      - name: Build ${{ env.own_components }}
        working-directory: ./${{ env.own_components }}
        run: yarn build

      - name: Install Premium Editor dependencies
        working-directory: ./premium-editor
        run: yarn

      - name: Build Premium Editor
        working-directory: ./premium-editor
        run: yarn build

      - name: Build Main Of ${{ env.project_name }}
        uses: ObsidianLabs/studio-build-action@master
        with:
          build: ${{ env.project_build }}
          project: ${{ env.project_project }}
          project_name: ${{ env.project_name }}
          build_script: ${{ env.project_main_build_script }}
          working-directory: ./studio
          enable_auth: ${{ env.main_enable_auth }}
          fontawesome_token: ${{ secrets.fontawesome_token }}
          mac_certs: ${{ secrets.certs }}
          mac_certs_password: ${{ secrets.certs_password }}
          windows_certs: ${{ secrets.certs }}
          windows_certs_password: ${{ secrets.certs_password }}
          react_app_mixpanel_token: ${{ secrets.react_app_mixpanel_token }}
          premium_editor: ${{ env.premium_editor }}
          github_token: ${{ github.token }}

      - name: Clean up Build assets
        working-directory: ./studio/dist
        run: rm builder-debug.yml

      - name: Upload assets
        uses: AButler/upload-release-assets@v2.0
        with:
          files: 'studio/dist/*.(dmg|zip|exe|AppImage|yml)'
          repo-token: ${{ github.token }}

      - name: Build Web of ${{ env.project_name }}
        uses: ObsidianLabs/studio-build-action@master
        with:
          build: ${{ env.project_build }}
          project: ${{ env.project_project }}
          project_name: ${{ env.project_name }}
          build_script: ${{ env.project_build_script }}
          working-directory: ./studio
          enable_auth: ${{ env.web_enable_auth }}
          fontawesome_token: ${{ secrets.fontawesome_token }}
          mac_certs: ${{ secrets.certs }}
          mac_certs_password: ${{ secrets.certs_password }}
          windows_certs: ${{ secrets.certs }}
          windows_certs_password: ${{ secrets.certs_password }}
          react_app_mixpanel_token: ${{ secrets.react_app_mixpanel_token }}
          premium_editor: ${{ env.premium_editor }}
          github_token: ${{ github.token }}

      # - name: Create a placeholder for COS
      #   run: echo cos > ./.placeholder

      # - name: Upload ${{ env.project_name }} to COS
      #   uses: zkqiang/tencent-cos-action@v0.1.0
      #   with:
      #     args: upload ./.placeholder / && delete -r -f / && upload -r ./studio/build/ /
      #     secret_id: ${{ secrets.tencent_cloud_secretid }}
      #     secret_key: ${{ secrets.tencent_cloud_secretkey }}
      #     bucket: ${{ env.cos_bucket }}
      #     region: ${{ env.cos_region }}

      # - name: Flush ${{ env.project_name }} CDN
      #   uses: TencentCloud/cli-action@v1
      #   with:
      #     secret_id: ${{ secrets.tencent_cloud_secretId }}
      #     secret_key: ${{ secrets.tencent_cloud_secretKey }}
      #     # Tencent Cloud product region
      #     region: ${{ env.cos_region }}
      #     # Tencent Cloud CLI commands. Mult commands seperate by `&&`
      #     commands: 'cdn PurgePathCache --cli-unfold-argument --Paths ${{ env.dns_path }} --FlushType flush'
      #     # Data format of command output. Available values are `json`, `table`, `text`. Default is `json`
      #     output_format: 'json'
